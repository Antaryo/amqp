# @title Ruby AMQP gem: Using vendor-specific AMQP extensions

h1. Vendor-specific AMQP extensions support in amqp gem

h2. RabbitMQ extensions

h2. Supported extensions

AMQP gem supports many RabbitMQ extensions to AMQP 0.9.1:

* "Publisher confirmations":http://www.rabbitmq.com/extensions.html#confirms (confirm.* class)
* "Negative acknowledgements":http://www.rabbitmq.com/extensions.html#negative-acknowledgements (basic.nack)
* "Per-queue Message Time-to-Live":http://www.rabbitmq.com/extensions.html#queue-ttl
* "Queue Leases":http://www.rabbitmq.com/extensions.html#queue-leases
* "Sender-selected Distribution":http://www.rabbitmq.com/extensions.html#sender-selected-distribution
* "Alternate Exchanges":http://www.rabbitmq.com/extensions.html#alternate-exchange
* "Validated user_id":http://www.rabbitmq.com/extensions.html#validated-user-id

h2. Enabling RabbitMQ extensions

If you are using RabbitMQ as AMQP broker and want to use these extensions, simply replace

<pre>require "amqp"</pre>

with

<pre>
require "amqp"
require "amqp/extensions/rabbitmq"
</pre>


h2. Per-queue Message Time-to-Live

Per-queue Message Time-to-Live (TTL) is a RabbitMQ extension to AMQP 0.9.1 that lets developers control for how long
a message published to a queue can live before it is discarded. A message that has been in the queue for longer than the
configured TTL is said to be dead. Dead messages will not be delivered to consumers and cannot be fetched using
*basic.get* operation ({AMQP::Queue#pop}).

Message TTL is specified using *x-message-ttl* argument on declaration. With amqp gem, you pass it to {AMQP::Queue#initialize} or
{AMQP::Channel#queue}:

<pre>
<code>
# 1000 milliseconds
channel.queue("", :arguments => { "x-message-ttl" => 1000 }
</code>
</pre>

When a published messages is routed to multiple queues, each of the queues gets a _copy of the message_. If then the message dies in
one of the queues, it has no effect on copies of the message in other queues.

h3. Example

The example below sets message TTL for a new server-named queue to be 1000 milliseconds. It then publishes several messages that
are routed to the queue and tries to fetch messages using *basic.get* AMQP method ({AMQP::Queue#pop} after 0.7 and 1.5 seconds:

<script src="https://gist.github.com/1113127.js"> </script>


h3. RabbitMQ Documentation

See also rabbitmq.com section on "Per-queue Message TTL":http://www.rabbitmq.com/extensions.html#queue-ttl



h2. Publisher Confirms

h3. Example

<script src="https://gist.github.com/923599.js?file=rabbitmq_publisher_confirmations_with_amqp_gem_0.8.0.rb"></script>



h2. basic.nack

TBD



h2. Authors

This guide was written by "Michael Klishin":http://twitter.com/michaelklishin and edited by "Chris Duncan":https://twitter.com/celldee.



h2. Tell us what you think!

Please take a moment and tell us what you think about this guide "on Twitter":http://twitter.com/rubyamqp or "Ruby AMQP mailing list":http://groups.google.com/group/ruby-amqp:
what was unclear? what wasn't covered? maybe you don't like guide style or grammar and spelling are incorrect? Readers feedback is
key to making documentation better.

If mailing list communication is not an option for you for some reason, you can "contact guides author directly":mailto:michael@novemberain.com?subject=amqp%20gem%20documentation


<div id="disqus_thread"></div>
<script type="text/javascript">
    /* * * CONFIGURATION VARIABLES * * */
    var disqus_shortname = 'rubyamqpdocs'; // required: replace example with your forum shortname

    var disqus_developer = 0; // set to 1 on local machine for testing comments
    var disqus_identifier = 'amqp_vendor_specific_extensions';
    var disqus_url = 'http://rdoc.info/github/ruby-amqp/amqp/master/file/docs/VendorSpecificExtensions.textile';

    /* * * DON'T EDIT BELOW THIS LINE * * */
    (function() {
        var dsq = document.createElement('script'); dsq.type = 'text/javascript'; dsq.async = true;
        dsq.src = 'http://' + disqus_shortname + '.disqus.com/embed.js';
        (document.getElementsByTagName('head')[0] || document.getElementsByTagName('body')[0]).appendChild(dsq);
    })();
</script>
